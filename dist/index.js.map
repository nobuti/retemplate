{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import { Children } from 'react'\n\n/*\n * Given a string, replace every {key} with the data[key] passed. This can be a function returning a\n * string or a raw string. The result will be an array of strings mixed with jsx elements. The primary\n * use case is similar to using String.prototype.replace except for React.\n *\n * Example:\n * template(\"hola {mundo} cruel {mundo} foo {wadus}\", { mundo: () => \"<span>mundo</span>\", wadus: \"foo\" })\n *\n */\n\nfunction insert (arr, index, ...items) {\n  return [...arr.slice(0, index), ...items, ...arr.slice(index)]\n}\n\nconst flat = arr => [].concat(...arr)\n\nconst replace = (result, match, data) => {\n  for (let index = 1; index < result.length; index += 2) {\n    const datum = data[match]\n    const item = typeof datum === 'function' ? datum() : datum\n    result = insert(result, index, item)\n  }\n\n  return result\n}\n\nexport default (locale, data = {}) => {\n  let str = [locale]\n\n  Object.keys(data).forEach(key => {\n    const re = new RegExp('{' + key + '}', 'g')\n    str = flat(str).map(x => {\n      const arr = x.toString().split(re)\n      const result = replace(arr, key, data)\n      return result\n    })\n  })\n\n  const children = flat(str).filter(s => !!s)\n  return Children.map(children, child => child)\n}\n"],"names":["insert","arr","index","items","slice","flat","concat","replace","result","match","data","length","datum","item","locale","str","Object","keys","forEach","key","re","RegExp","map","x","toString","split","children","filter","s","Children","child"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;AAUA,SAASA,MAAT,CAAiBC,GAAjB,EAAsBC,KAAtB,EAAuC;AAAA,oCAAPC,KAAO;AAAPA,IAAAA,KAAO;AAAA;;AACrC,sCAAWF,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaF,KAAb,CAAX,GAAmCC,KAAnC,qBAA6CF,GAAG,CAACG,KAAJ,CAAUF,KAAV,CAA7C;AACD;;AAED,IAAMG,IAAI,GAAG,SAAPA,IAAO,CAAAJ,GAAG;AAAA;;AAAA,SAAI,YAAGK,MAAH,gCAAaL,GAAb,EAAJ;AAAA,CAAhB;;AAEA,IAAMM,OAAO,GAAG,SAAVA,OAAU,CAACC,MAAD,EAASC,KAAT,EAAgBC,IAAhB,EAAyB;AACvC,OAAK,IAAIR,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGM,MAAM,CAACG,MAAnC,EAA2CT,KAAK,IAAI,CAApD,EAAuD;AACrD,QAAMU,KAAK,GAAGF,IAAI,CAACD,KAAD,CAAlB;AACA,QAAMI,IAAI,GAAG,OAAOD,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,EAAnC,GAAwCA,KAArD;AACAJ,IAAAA,MAAM,GAAGR,MAAM,CAACQ,MAAD,EAASN,KAAT,EAAgBW,IAAhB,CAAf;AACD;;AAED,SAAOL,MAAP;AACD,CARD;;AAUA,aAAe,UAACM,MAAD,EAAuB;AAAA,MAAdJ,IAAc,uEAAP,EAAO;AACpC,MAAIK,GAAG,GAAG,CAACD,MAAD,CAAV;AAEAE,EAAAA,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkBQ,OAAlB,CAA0B,UAAAC,GAAG,EAAI;AAC/B,QAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAW,MAAMF,GAAN,GAAY,GAAvB,EAA4B,GAA5B,CAAX;AACAJ,IAAAA,GAAG,GAAGV,IAAI,CAACU,GAAD,CAAJ,CAAUO,GAAV,CAAc,UAAAC,CAAC,EAAI;AACvB,UAAMtB,GAAG,GAAGsB,CAAC,CAACC,QAAF,GAAaC,KAAb,CAAmBL,EAAnB,CAAZ;AACA,UAAMZ,MAAM,GAAGD,OAAO,CAACN,GAAD,EAAMkB,GAAN,EAAWT,IAAX,CAAtB;AACA,aAAOF,MAAP;AACD,KAJK,CAAN;AAKD,GAPD;AASA,MAAMkB,QAAQ,GAAGrB,IAAI,CAACU,GAAD,CAAJ,CAAUY,MAAV,CAAiB,UAAAC,CAAC;AAAA,WAAI,CAAC,CAACA,CAAN;AAAA,GAAlB,CAAjB;AACA,SAAOC,cAAQ,CAACP,GAAT,CAAaI,QAAb,EAAuB,UAAAI,KAAK;AAAA,WAAIA,KAAJ;AAAA,GAA5B,CAAP;AACD,CAdD;;;;"}